<?php
/**
 * @file
 *
 * This file contains the testing code which requires the database. These
 * tests are slower than the unit tests so we want to limit them.
 */

/**
 * The test case
 */
class realistic_dummy_content_DatabaseTestCase extends DrupalWebTestCase {
  /**
   * Info for this test case.
   */
  public static function getInfo() {
    return array(
      'name' => t('Realistic dummy content database test'),
      'description' => t('Test Realistic dummy content with a temporary database.'),
      'group' => 'Realistic dummy content',
    );
  }

  /**
   * Enable the module
   */
  public function setUp() {
    parent::setUp('realistic_dummy_content_api', 'realistic_dummy_content', 'devel_generate');

    // Our test needs to check that a given content was replaced, so turn
    // off random number generator during the test.
    variable_set('realistic_dummy_content_api_rand', REALISTIC_DUMMY_CONTENT_SEQUENTIAL);
  }

  /*
   * Test case for realistic_dummy_content_api with the database.
   */
  public function testModule() {
    // Create a node with the devel_generate property set.
    $nids = array();
    for ($i = 1; $i <= 9; $i++) {
      $node = (object)array(
        'title' => $this->randomName(),
        'type' => 'article',
      );
      $node->devel_generate = array('whatever');
      node_save($node);
      $nids[$node->nid] = $node->nid;
    }

    // Create a user with devel_generate
    module_load_include('inc', 'devel_generate');
    devel_create_users(1, 0);

    // Load the user and view
    $nodes = node_load_multiple($nids);
    $user = user_load(2);

    $expected_values = array(
      'title' => array(
        'F',
        'S',
        'T',
      ),
      'body' => array(
        'D',
        'I',
        'L',
      ),
    );

    foreach ($nodes as $nid => $node) {
      // The node should have replaced the image with our own.
      $filename = $node->field_image[LANGUAGE_NONE][0]['filename'];
      $this->assertTrue(drupal_substr($filename, 0, drupal_strlen('dummyfile')) == 'dummyfile', 'The image file was replaced as expected for node/article/field_image. We know this because the filename starts with the string "dummyfile"');

      $title = $node->title[0];
      $title_expected = $expected_values['title'][($nid - 1)%3];
      $body = $node->body[LANGUAGE_NONE][0]['value'][0];
      $body_expected = $expected_values['body'][($nid - 1)%3];
      $this->assertTrue($title == $title_expected, 'Title first letter (' . $title . ') is as expected (' . $title_expected . ') for this nid (' . $nid . ')');
      $this->assertTrue($body == $body_expected, 'Body first letter (' . $body . ') is as expected (' . $body_expected . ') for this nid (' . $nid . ')');
    }

    $filename = $user->picture->filename;
    $this->assertTrue(drupal_substr($filename, 0, drupal_strlen('dummyfile')) == 'dummyfile', 'The user\'s picture file was replaced as expected. We know this because the filename starts with the string "dummyfile"');
    $current_pictre = $user->picture;
    user_save($user);
    $user = user_load($user->uid);
    $this->assertTrue($current_pictre == $user->picture, 'The dummy file generation happens when the user is first created, not when it is resaved.');
  }
}
